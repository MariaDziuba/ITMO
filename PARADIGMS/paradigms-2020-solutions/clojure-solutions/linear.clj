(defn operation [f] (fn [& arg] (apply mapv f arg)))
(def v+ (operation +))
(def v- (operation -))
(def v* (operation *))
(def vd (operation /))
(def m+ (operation v+))
(def m- (operation v-))
(def m* (operation v*))
(def md (operation vd))
(def c+ (operation m+))
(def c- (operation m-))
(def c* (operation m*))
(def cd (operation md))
(defn transpose [m] (apply mapv vector m))
(defn scalar [a, b] (apply + (v* a b)))
(defn minor [a b i j] (- (* (nth a i) (nth b j)) (* (nth a j) (nth b i))))
(defn vect [a b] [(minor a b 1 2) (minor a b 2 0) (minor a b 0 1)])
(defn v*s [v s] (mapv (fn [x] (* x s)) v))
(defn m*s [m s] (mapv (fn [v] (v*s v s)) m))
(defn m*v [m v] (mapv (fn [x] (scalar x v)) m))
(defn m*m [m1 m2] (transpose (mapv (fn [v] (m*v m1 v)) (transpose m2))))